version: '3.8'

services:
  neo4j:
    image: neo4j:5.15-community
    container_name: analyst_agent_neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/analyst123
      - NEO4J_PLUGINS=["graph-data-science","apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=gds.*,apoc.*
      - NEO4J_dbms_security_procedures_allowlist=gds.*,apoc.*
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
      - ./neo4j/init:/docker-entrypoint-initdb.d
    networks:
      - analyst_network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "analyst123", "RETURN 1;"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: analyst_agent_postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=analyst_agent
      - POSTGRES_USER=analyst
      - POSTGRES_PASSWORD=analyst123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - analyst_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analyst"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: analyst_agent_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - analyst_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Dedicated cache Redis (db 1) for Backpressure & Vector indices
  redis-cache:
    image: redis:7-alpine
    container_name: analyst_agent_redis_cache
    ports:
      - "6380:6379"          # Map host 6380 -> container 6379
    command: ["redis-server", "--databases", "2"]  # enable multiple DBs; we'll use db 1
    volumes:
      - redis_cache_data:/data
    networks:
      - analyst_network
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: analyst_agent_backend
    ports:
      - "8000:8000"
    environment:
      - APP_NAME=Analyst Augmentation Agent
      - APP_VERSION=1.0.0
      - DEBUG=true
      - LOG_LEVEL=INFO
      - SECRET_KEY=${SECRET_KEY:-analyst_agent_secret_key_change_in_production}
      # Allow browser requests coming from the frontend containers/host only
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRATION_MINUTES=60
      - JWT_REFRESH_EXPIRATION_MINUTES=10080
      - JWT_AUDIENCE=analyst-agent-api
      - JWT_ISSUER=analyst-agent
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GEMINI_MODEL=gemini-1.5-pro
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=analyst123
      - NEO4J_DATABASE=neo4j
      - E2B_API_KEY=${E2B_API_KEY}
      - E2B_TEMPLATE_ID=python-data-science
      - DATABASE_URL=postgresql://analyst:analyst123@postgres:5432/analyst_agent
    command: sh -c "alembic upgrade head && uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload"
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
    networks:
      - analyst_network
    profiles:
      - dev
      - prod

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: analyst_agent_frontend
    ports:
      - "3000:3000"
    environment:
      # Include /api/v1 to point the frontend to the correct backend base path
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - analyst_network
    profiles:
      - dev
      - prod

  # Optional: Jupyter for development and analysis
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: analyst_agent_jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./backend:/home/jovyan/work/backend
    networks:
      - analyst_network
    profiles:
      - dev

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  postgres_data:
  redis_data:
  redis_cache_data:

networks:
  analyst_network:
    driver: bridge
