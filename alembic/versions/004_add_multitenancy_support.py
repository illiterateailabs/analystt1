"""add multitenancy support

Revision ID: 004_add_multitenancy_support
Revises: 003_add_conversations_tables
Create Date: 2025-07-07 10:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '004_add_multitenancy_support'
down_revision = '003_add_conversations_tables'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create 'tenants' table
    op.create_table(
        'tenants',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.func.now(), nullable=False),
        sa.Column('active', sa.Boolean(), server_default=sa.true(), nullable=False),
        sa.Column('isolation_level', sa.String(), nullable=False),
        sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_tenants_name'), 'tenants', ['name'], unique=True)

    # Create 'model_metadata' table for ML model registry
    op.create_table(
        'model_metadata',
        sa.Column('version', sa.String(), nullable=False),
        sa.Column('model_type', sa.String(), nullable=False),
        sa.Column('framework', sa.String(), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.func.now(), nullable=False),
        sa.Column('created_by', sa.String(), nullable=True),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('metrics', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
        sa.Column('metadata_json', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
        sa.PrimaryKeyConstraint('version')
    )
    op.create_index(op.f('ix_model_metadata_model_type'), 'model_metadata', ['model_type'], unique=False)
    op.create_index(op.f('ix_model_metadata_framework'), 'model_metadata', ['framework'], unique=False)

    # Add 'tenant_id' column to existing tables
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('tenant_id', sa.String(), nullable=True))
    with op.batch_alter_table('conversations', schema=None) as batch_op:
        batch_op.add_column(sa.Column('tenant_id', sa.String(), nullable=True))
    with op.batch_alter_table('hitl_reviews', schema=None) as batch_op:
        batch_op.add_column(sa.Column('tenant_id', sa.String(), nullable=True))

    # Data migration: Set default tenant_id for existing records
    op.execute("INSERT INTO tenants (id, name, active, isolation_level) VALUES ('default', 'Default Tenant', TRUE, 'field') ON CONFLICT (id) DO NOTHING;")
    op.execute("UPDATE users SET tenant_id = 'default' WHERE tenant_id IS NULL;")
    op.execute("UPDATE conversations SET tenant_id = 'default' WHERE tenant_id IS NULL;")
    op.execute("UPDATE hitl_reviews SET tenant_id = 'default' WHERE tenant_id IS NULL;")

    # Alter 'tenant_id' columns to be non-nullable and add foreign key constraints
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('tenant_id', existing_type=sa.String(), nullable=False)
        batch_op.create_foreign_key(
            batch_op.f('fk_users_tenant_id_tenants'),
            'tenants', ['tenant_id'], ['id'], ondelete='CASCADE'
        )
        batch_op.create_index(batch_op.f('ix_users_tenant_id'), 'users', ['tenant_id'], unique=False)

    with op.batch_alter_table('conversations', schema=None) as batch_op:
        batch_op.alter_column('tenant_id', existing_type=sa.String(), nullable=False)
        batch_op.create_foreign_key(
            batch_op.f('fk_conversations_tenant_id_tenants'),
            'tenants', ['tenant_id'], ['id'], ondelete='CASCADE'
        )
        batch_op.create_index(batch_op.f('ix_conversations_tenant_id'), 'conversations', ['tenant_id'], unique=False)

    with op.batch_alter_table('hitl_reviews', schema=None) as batch_op:
        batch_op.alter_column('tenant_id', existing_type=sa.String(), nullable=False)
        batch_op.create_foreign_key(
            batch_op.f('fk_hitl_reviews_tenant_id_tenants'),
            'tenants', ['tenant_id'], ['id'], ondelete='CASCADE'
        )
        batch_op.create_index(batch_op.f('ix_hitl_reviews_tenant_id'), 'hitl_reviews', ['tenant_id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop foreign key constraints and indexes
    with op.batch_alter_table('hitl_reviews', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_hitl_reviews_tenant_id'))
        batch_op.drop_constraint(batch_op.f('fk_hitl_reviews_tenant_id_tenants'), type_='foreignkey')
        batch_op.drop_column('tenant_id')

    with op.batch_alter_table('conversations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_conversations_tenant_id'))
        batch_op.drop_constraint(batch_op.f('fk_conversations_tenant_id_tenants'), type_='foreignkey')
        batch_op.drop_column('tenant_id')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_tenant_id'))
        batch_op.drop_constraint(batch_op.f('fk_users_tenant_id_tenants'), type_='foreignkey')
        batch_op.drop_column('tenant_id')

    # Drop 'model_metadata' table
    op.drop_index(op.f('ix_model_metadata_framework'), table_name='model_metadata')
    op.drop_index(op.f('ix_model_metadata_model_type'), table_name='model_metadata')
    op.drop_table('model_metadata')

    # Drop 'tenants' table
    op.drop_index(op.f('ix_tenants_name'), table_name='tenants')
    op.drop_table('tenants')
    # ### end Alembic commands ###
